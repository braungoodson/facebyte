var facebyte = angular.module('facebyte',['ngRoute']);
facebyte.config(['$routeProvider',function($routeProvider){
	$routeProvider.when('/views/home',{
		templateUrl: 'views/home'
	});
	$routeProvider.when('/views/users/read',{
		templateUrl: 'views/users/read'
	});
	$routeProvider.when('/views/users/create',{
		templateUrl: 'views/users/create'
	});
	$routeProvider.when('/views/users/login',{
		templateUrl: 'views/users/login'
	});
	$routeProvider.otherwise({redirectTo:'/views/home'})
}]);
facebyte.factory('$facebyteCacheFactory',[function(){
	var factory = {};
	var user = new User();
	factory.getUser = function () {
		return user;
	}
	factory.setUser = function (u) {
		user = u;
	}
	return factory;
}]);
facebyte.controller('urlController',['$scope',function($scope){
	$scope.urls = [new Url(),new Url(),new Url(),new Url()];
	readUrls();
	function readUrls () {
		$scope.urls = [];
		$scope.urls = [
			new Url('/views/home','Home'),
			new Url('/views/users/read','Users'),
			new Url('/views/users/create','Create User')
		];
	}
}]);
facebyte.controller('usersLoginController',['$scope','$http','$facebyteCacheFactory',function($scope,$http,$facebyteCacheFactory){
	// adjshfaksdhfkladfhjskljdhsf
	$scope.user = $facebyteCacheFactory.getUser();
}]);
facebyte.controller('usersReadController',['$scope','$http','$facebyteCacheFactory',function($scope,$http,$facebyteCacheFactory){
	$scope.user = $facebyteCacheFactory.getUser();
	$scope.users = [new User(),new User(),new User(),new User()];
	//readUsers();	
	function readUsers () {
		$http({
			method: 'GET',
			url: 'http://localhost:30000/users'
		}).success(function(d,s,h,c){
				if (s == 200) {
					if (d.length) {
						$scope.users = [];
						for (var user in d) {
							$scope.users.push(new User(d[user]));
						}
					} else {
						console.warn(d,h());
					}
				} else {
					console.error(h());
				}
			});
	}
}]);
facebyte.controller('usersCreateController',['$scope','$http','$facebyteCacheFactory',function($scope,$http,$facebyteCacheFactory){
	$scope.user = $facebyteCacheFactory.getUser();
	$scope.createUser = createUser;
	(function f (next) {
		var input = document.getElementById('facebyteFile');
		input.addEventListener('change',function(event){
			var file = event.target.files[0];
			if (file.size < 1000) {
				throw new Error('Filesize too small.')
			}
			if (file.size > 10000) {
				throw new Error('Filesize too large.')
			}
			function unsupportedFileType(fileType) {
				switch (fileType) {
					case 'image/jpeg' : return false;
					case 'image/jpg' : return false;
					case 'image/png'  : return false;
					default : return true;
				}
			}
			console.log(file.type)
			if (unsupportedFileType(file.type)) {
				throw new Error('Filetype not supported.')
			}
			var reader = new FileReader();
			reader.onload = function (eevent) {
				var payload = eevent.target.result;
				next(payload);
			}
			reader.readAsDataURL(file);
		});		
	}(function(payload){
		console.log(payload)
	}));
	function createUser (debug) {
		if (debug) {

		} else {
			$http({
					method: 'POST',
					url: 'http://localhost:30000/users/'+$scope.user.usernameBase64()+'/'+$scope.user.passwordBase64()
			}).success(function(d,s,h,c){
				console.log(d,s,h(),c);
				if (s == 200) {
					if (d.length) {
						if (d.error) {
							console.log(d,h());
						} else {
							console.log(d);
							$scope.user.token = d.token;
						}
					} else {
						console.warn(d,h());
					}
				} else {
					console.error(d,h());
				}
			});
		}
	}
}]);

function Url (url,text) {
	this.href = url || "null";
	this.text = text || "Hyperlink";
}
function User (user) {
	if (user) {
		this = user;
	} else {
		return {
			username: "YWRtaW5pc3RyYXRvcg==",
			password: "YWRtaW5pc3RyYXRvcg==",
			token: 'NzY1RkRHU2tqaDg5NzZqa2doNTYzNEhKRkdoZmc3ODY1Rks0ODlrYmszNzQ3OExrdg==',
			facebyte: '',
			dates: {
				created: 'VHVlIEFwciAxNSAyMDE0IDIxOjQzOjE0IEdNVC0wNDAwIChFRFQp',
				lastUpdated: 'VHVlIEFwciAxNSAyMDE0IDIxOjQzOjE0IEdNVC0wNDAwIChFRFQp',
			},
			update: 'VGhpcyBpcyB0aGUgQWRtaW5pc3RyYXRvci4='
		};
	}
	var _user = user || {};
	this.username = _user.username || "Guest";
	this.password = _user.password || "Password";
	this.token = _user.token || "";
	this.facebyte = _user.facebyte || "";
	this.dates = _user.dates || {
		created: new Date(),
		lastUpdated: new Date()
	};
	this.update = _user.update || "Hey, facebytes! Care to welcome @"+this.username+" to facebyte? :)";
}
User.prototype.userAttributeDecoded = function (encoded) {
	return atob(encoded);
}
User.prototype.userAttributeEncoded = function (decoded) {
	return btoa(decoded);
}
User.prototype.usernameBase64 = function () {
	return btoa(this.username);
}
User.prototype.passwordBase64 = function () {
	return btoa(this.password);
}
User.prototype.tokenBase64 = function () {
	return btoa(this.token);
}
User.prototype.facebyteBase64 = function () {
	return btoa(this.facebyte);
}